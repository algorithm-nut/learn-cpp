#include <iostream>
#include "vector.h"
#include "stack.h"
#include "linkedlist.h"
#include "queue.h"
using namespace std;

int main() {
	
	/*演示 数组类Vector  十进制转二进制*/
	Vector<int> v(10);
	int n, i;
	cout << "输入一个十进制正整数: ";
	cin >> n;
	i = 0;
	while(n > 0) {
		if(i == v.getSize())
			v.resize(2 * i);
        v[i++] = n % 2;	// 在循环中取出余数，存放在向量中 */
        n = n / 2;
    }
	cout << "对应的二进制数: ";
	for(int k = i - 1; k >= 0; --k)
		cout << v[k];
	cout << endl;
	
	/*演示  栈类Stack  后进先出*/
	Stack<int> intStack(5);
    for(int i = 0; i < 10; ++i)
        intStack.push(i);
    while(!intStack.isEmpty())
        cout << intStack.pop() << " ";
    cout << endl;
    
    /*演示  链表LinkedList*/ 
    //链表可以根据需要扩大和缩小 
    //链表不具有数组通过下标随机访问元素的能力 
    LinkedList<string> list;
	list.addLast("北京");
	cout << "(1) ";
	list.print();
	list.add(0, "杭州");
	cout << "(2) ";
	list.print();
	list.addLast("上海");
	cout << "(3) ";
	list.print();
	list.addLast("广州");
	cout << "(4) ";
	list.print();
	list.add(3, "天津");
	cout << "(5) ";
	list.print();
	list.add(5, "重庆");
	cout << "(6) ";
	list.print();
	list.addFirst("中国");
	list.addLast("中国");
	cout << "(7) ";
	list.print();
	list.removeFirst();
	list.removeLast();
	cout << "(8) ";
	list.print();
	cout << "链表首元素: " << list.getFirst() << endl;
	cout << "链表尾元素: " << list.getLast() << endl;
	cout << "链表结点个数: " << list.getSize() << endl;
	list.clear();
	if(list.isEmpty())
		cout << "空链表" << endl;
	
	/*演示  队列Queue  先进先出*/
	//队尾插入(入队)，队头删除(出队)	
	Queue<int> intQueue;
    for(int i = 0; i < 10; ++i)
        intQueue.enqueue(i);
    while(!intQueue.isEmpty())
        cout << intQueue.dequeue() << " ";
    cout << endl;

    return 0;	
} 
	
