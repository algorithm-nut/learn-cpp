#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <string.h> 
#include "compute.h"
#include "sort.h"
#include "print.h"
#include "game.h"

#define MAX(a,b,c) (a>b ? (a>c ? a : c) : (b>c ? b : c))
#define MAX2(a, b) (a>b ? a : b)
#define MAX3(a, b, c) MAX2(MAX2(a, b), c)

#define ARRAY_SIZE 6   //50 
#define STRING_LENGTH 80
#define ROW_SIZE 10
#define COLUMN_SIZE 10
#define MAX_LINE 100   //一行最多读入的字符数
#define MAX_SIZE 26

#define FILENAME1 "input.txt"
#define FILENAME2 "output.txt"
#define FILENAME3 "example.txt"
#define FILENAME4 "duplication.txt"
#define FILENAME5 "example.bin" 


typedef struct {
		double realPart;
		double imaginaryPart;
} COMPLEX;

COMPLEX makeComplex(double r, double i);
COMPLEX addComplex(COMPLEX x, COMPLEX y);
COMPLEX subComplex(COMPLEX x, COMPLEX y);
COMPLEX mulComplex(COMPLEX x, COMPLEX y);
COMPLEX divComplex(COMPLEX x, COMPLEX y);
 
/*输出复数运算结果*/ 
void printComplex(COMPLEX c);

int main (void) {
//	count_maxAverage();
//	sort_totalScore();
//    compute_grade(); 
    
//    struct date_list d;
//    printf("输入年，月，日: ");
//    scanf("%d %d %d", &d.year, &d.month, &d.day);
//    printf("该日期是%d年第%d天\n", d.year, compute_dayNumofYear1(d));
//    printf("该日期是%d年第%d天\n", d.year, compute_dayNumofYear2(&d));


//    COMPLEX a, b, c;
//    a = makeComplex(3, -2);
//    b = makeComplex(2, 3);
//    printComplex(a);
//    printComplex(b);
//    c = addComplex(a, b);
//    printComplex(c);
//    c = subComplex(a, b);
//    printComplex(c);
//    c = mulComplex(a, b);
//    printComplex(c);
//    c = divComplex(a, b);
//    printComplex(c);

//    compute_yearTotal();


//    struct node1 *head = NULL;
////    head = createList1();
//    head = createSortList();
//    printList1(head);
    
    struct node2 *head = NULL;
    int x, count, numbers[ARRAY_SIZE];
    count = 0;
    while(scanf("%d", &x) == 1)
        numbers[count++] = x;
    head = createList2(numbers, count);
    printList2(head);
    
//	int num = 123;
//	int digit = compute_sumofEach(num);
//	printf("%-4d各位数之和为%-4d\n", num, digit);

//	printf("%d\n",max(3,5));
// 	putchar('HY');  //单引号，输出的是Y 
// 	putchar('\n');
 
//    char num = 97;  //是字符类型也没有关系 
//	printf("%c的ASCII码：%d",num,num);

//	char string[10];  //这里要声明成数组 
//	scanf("%5s",string);
//	printf("%s\n",string); 


    /*解决getchar() 多次输入的问题*/ 
//    char lowercase;
//    lowercase = getchar(); 
//    getchar();  //吞掉回车 
//	putchar(toUppercase(lowercase));
//	putchar('\n');
//	lowercase = getchar(); 
//	putchar(toUppercase(lowercase));
//	getchar();
//	putchar('\n');
	
	return 0;
}


/*复数运算*/ 
COMPLEX makeComplex(double r, double i) 
{
    COMPLEX temp;
    temp.realPart = r;
    temp.imaginaryPart = i;
    return temp;
}
COMPLEX addComplex(COMPLEX x, COMPLEX y) 
{
    COMPLEX temp;
    temp.realPart = x.realPart + y.realPart;
    temp.imaginaryPart = x.imaginaryPart + y.imaginaryPart;
    return temp;
}
COMPLEX subComplex(COMPLEX x, COMPLEX y) 
{
    COMPLEX temp;
    temp.realPart = x.realPart - y.realPart;
    temp.imaginaryPart = x.imaginaryPart - y.imaginaryPart;
    return temp;
}
COMPLEX mulComplex(COMPLEX x, COMPLEX y) 
{
    COMPLEX temp;
    temp.realPart = x.realPart * y.realPart - x.imaginaryPart * y.imaginaryPart;
    temp.imaginaryPart = x.realPart * y.imaginaryPart + x.imaginaryPart * y.realPart;
    return temp;
}
COMPLEX divComplex(COMPLEX x, COMPLEX y) 
{
    COMPLEX temp;
    double denominator = y.realPart * y.realPart + y.imaginaryPart * y.imaginaryPart;
    if(denominator == 0) {
        printf("Complex error: divide by zero.\n");
        exit(EXIT_FAILURE);
    }
    else {
        temp.realPart = (x.realPart * y.realPart +
                                   x.imaginaryPart * y.imaginaryPart) / denominator;
        temp.imaginaryPart = (x.imaginaryPart * y.realPart -
                                             x.realPart * y.imaginaryPart) / denominator;
    }
    return temp;
} 

/*输出复数运算结果*/ 
void printComplex(COMPLEX c) 
{
    if(c.realPart == 0 && c.imaginaryPart == 0)
        printf("%f\n", c.realPart);
    if(c.realPart && c.imaginaryPart > 0)
        printf("%f+%fi\n", c.realPart, c.imaginaryPart);
    if(c.realPart && c.imaginaryPart < 0)
        printf("%f%fi\n", c.realPart, c.imaginaryPart);
    if(c.realPart && c.imaginaryPart == 0)
        printf("%f\n", c.realPart);
    if(c.realPart == 0 && c.imaginaryPart)
        printf("%fi\n", c.imaginaryPart);
}

